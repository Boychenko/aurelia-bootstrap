"bundle";!function(){var a=System.amdDefine;a("accordion/accordion.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="container-fluid"><div class="page-header"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-bootstrap/tree/master/doc/src/accordion"><i class="fa fa-edit"></i> Improve documentation</a><h1>Accordion</h1></div><div class="row"><div class="col-sm-6 col-xs-12"><p><a class="btn btn-default" aubs-btn-checkbox="state.bind: closeOthers">Close Others</a> <a class="btn btn-default" aubs-btn-checkbox="state.bind: firstTabState">Toggle First</a> <a class="btn btn-default" aubs-btn-checkbox="state.bind: secondDisabled">Disable Second</a></p><aubs-accordion close-others.bind="closeOthers"><aubs-accordion-group title="Collapsible Group Item #1" is-open.bind="firstTabState">Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them accusamus labore sustainable VHS.</aubs-accordion-group><aubs-accordion-group title="Collapsible Group Item #2" disabled.bind="secondDisabled">You can disable the panel header preventing the item to be manually toggled.</aubs-accordion-group><aubs-accordion-group title="Markup Title <i class=\'fa fa-heart\'></i>">You can use html markup in the Acoordion group title.</aubs-accordion-group><aubs-accordion-group title="With Panel Class" panel-class="panel-danger">You can specify the class for the panel in the accordion group.</aubs-accordion-group></aubs-accordion></div><div class="col-sm-6 col-xs-12"><p>The <code>aubs-accordion</code> and <code>aubs-accordion-group</code> custom elements allow you to easily organize your content in panels that collapse and expand with a click.</p><h3>aubs-accordion</h3><p>This custom element is a wrapper for all of the accordion groups. It has a single setting:</p><ul><li><code>close-others</code><boolean></boolean><i>(default: true)</i>: Boolean that determines whether or not we should close all the other items when one is opened</li></ul><h3>aubs-accordion-group</h3><p>Represents one item in the accordion, it must be a direct descendant of <code>aubs-accordion</code>. The inner html of the Custom Element will be transcluded into the collapsable section of the panel. Its properties are:</p><ul><li><code>title</code><string></string><i>(required)</i>: This String will be the clickable text for the panel header. You can provided html markup.</li><li><code>panel-class</code><string></string><i>(default: panel-default)</i>: This is the css class for the panel. It needs to be a Bootstrap panel class.<br><strong>Note:</strong> In bootstrap 4 mode this property is ignored.</li><li><code>is-open</code><boolean></boolean><two-way></two-way>: Reflects the state of the item. You can use this property to programmatically toggle one item.</li><li><code>disabled</code><boolean></boolean><i>(default: false)</i>: Boolean that determines if the item is disabled. A disabled item cannot be manually toggled, but it can still be programmatically toggled.</li></ul></div><div class="col-xs-12"><hr><aubs-tabset><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;p>\n        &lt;a class="btn btn-default" aubs-btn-checkbox="state.bind: closeOthers">Close Others&lt;/a>\n        &lt;a class="btn btn-default" aubs-btn-checkbox="state.bind: firstTabState">Toggle First&lt;/a>\n        &lt;a class="btn btn-default" aubs-btn-checkbox="state.bind: secondDisabled">Disable Second&lt;/a>\n    &lt;/p>\n\n\n    &lt;aubs-accordion close-others.bind="closeOthers">\n        &lt;aubs-accordion-group title="Collapsible Group Item #1" is-open.bind="firstTabState">\n            Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia\n            aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor,\n            sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh\n            helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo.\n            Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven\'t heard of them\n            accusamus labore sustainable VHS.\n        &lt;/aubs-accordion-group>\n\n        &lt;aubs-accordion-group title="Collapsible Group Item #2" disabled.bind="secondDisabled">\n            You can disable the panel header preventing the item to be manually toggled.\n        &lt;/aubs-accordion-group>\n\n        &lt;aubs-accordion-group title="Markup Title &lt;i class=\'fa fa-heart\'>&lt;/i>">\n            You can use html markup in the Acoordion group title.\n        &lt;/aubs-accordion-group>\n\n        &lt;aubs-accordion-group title="With Panel Class" panel-class="panel-danger">\n            You can specify the class for the panel in the accordion group.\n        &lt;/aubs-accordion-group>\n    &lt;/aubs-accordion>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>export class Example {\n    firstTabState = true;\n    closeOthers = true;\n}</code></pre></aubs-tab></aubs-tabset></div></div></div></template>'})}(),System.register("accordion/accordion.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("Accordion",d=function a(){c(this,a),this.firstTabState=!0,this.closeOthers=!0}),a("Accordion",d)}}}),function(){var a=System.amdDefine;a("app.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><require from="nav-bar.html"></require><require from="bootstrap/css/bootstrap.css"></require><nav-bar router.bind="router"></nav-bar><div class="page-host"><router-view></router-view><div class="container-fluid"><div class="text-center"><hr><p>Hector Romero, 2016 under the MIT License</p></div></div></div></template>'})}(),System.register("app.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("App",d=function(){function a(){c(this,a)}return a.prototype.configureRouter=function(a,b){a.title="Aurelia Bootstrap",a.map([{route:["","introduction"],name:"introduction",moduleId:"introduction/introduction",nav:!1},{route:["accordion"],name:"accordion",moduleId:"accordion/accordion",nav:!0,title:"Accordion"},{route:["buttons"],name:"buttons",moduleId:"buttons/buttons",nav:!0,title:"Buttons"}]),this.router=b},a}()),a("App",d)}}}),function(){var a=System.amdDefine;a("buttons/buttons.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="container-fluid"><div class="page-header"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-bootstrap/tree/master/doc/src/buttons"><i class="fa fa-edit"></i> Improve documentation</a><h1>Buttons</h1></div><div class="row"><div class="col-sm-6 col-xs-12"><h3>Single Toggle</h3><pre>Checked: ${singleToggle.value}</pre><a class="btn btn-success" aubs-btn-checkbox="state.bind: singleToggle; checked-value.bind: myChecked; unchecked-value.bind: myUnchecked">Single Toggle</a><h3>Checkbox</h3><pre>Values: {left: ${checkboxValues.left}, middle: ${checkboxValues.middle}, right: ${checkboxValues.right}}</pre><div class="btn-group"><a class="btn btn-warning" aubs-btn-checkbox="state.bind: checkboxValues.left">Left</a> <a class="btn btn-warning" aubs-btn-checkbox="state.bind: checkboxValues.middle;">Middle</a> <a class="btn btn-warning" aubs-btn-checkbox="state.bind: checkboxValues.right">Right</a></div><h3>Radio Button</h3><pre>Selection: ${radioSelection}</pre><div class="btn-group"><a class="btn btn-default" aubs-btn-radio="model.bind: radioSelection; value: left">Left</a> <a class="btn btn-default ${disabled ? \'disabled\' : \'\'}" aubs-btn-radio="model.bind: radioSelection; value: middle">Middle</a> <a class="btn btn-default" aubs-btn-radio="model.bind: radioSelection; value: right">Right</a></div><div class="checkbox"><label><input type="checkbox" checked.bind="disabled"> Disable Middle</label></div><h3>Loading Button</h3><a class="btn btn-default" click.delegate="ajaxCall()" aubs-btn-loading="loading.bind: isLoading; text: <i class=\'fa fa-refresh fa-spin\'></i> Loading...">Ajax Call</a></div><div class="col-sm-6 col-xs-12"><p>We provide a couple of custom attributes to enhance buttons. Any of this custom attributes can be used with either the <code>a</code> or <code>button</code> tags.</p><h3>aubs-btn-checkbox</h3><p>This custom attribute allow you to use buttons instead of checkboxes. Buttons with this custom attribute behave like toggle buttons. One of the advantages over normal checkboxes is that you can use any object as the checked and unchecked values.</p><ul><li><code>state</code><property></property><i>(default: <code>unchecked-value</code>)</i>: This field holds the state of your button. The button will toggle between <code>checked-value</code> and <code>unchecked-value</code>.</li><li><code>checked-value</code><any></any>(default: true): Represents the checked value of your button.</li><li><code>unchecked-value</code><any></any>(default: false): Represents the unchecked value of your button.</li></ul><h3>aubs-btn-radio</h3><p>This custom attribute allows you to use buttons instead of radio buttons. Buttons will behave like toggle buttons and again you can use any object as the value for your radios.</p><ul><li><code>model</code><property></property>: Holds the selected value in your radio group. All the <code>aubs-btn-radio</code> buttons that bind to the same property belong to the same radio group.</li><li><code>value</code><any></any>: The value for the radio button.</li></ul><h3>aubs-btn-loading</h3><p>Use this custom attribute to change your buttons into a loading state. On this state they are disabled and display a message.</p><ul><li><code>loading</code><boolean></boolean>: Allows you control the loading state of the button. If <code>true</code> the button inner html will be changed to the value of the provided <code>text</code>.</li><li><code>text</code><string></string><markup></markup><i>(default: Loading...)</i>: The text to use when the button is on a loading state.</li></ul></div><div class="col-xs-12"><hr><aubs-tabset><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;h3>Single Toggle&lt;/h3>\n    &lt;pre>Checked: ${open}singleToggle.value}&lt;/pre>\n    &lt;a class="btn btn-success"\n       aubs-btn-checkbox="state.bind: singleToggle; checked-value.bind: myChecked; unchecked-value.bind: myUnchecked">\n        Single Toggle\n    &lt;/a>\n\n    &lt;h3>Checkbox&lt;/h3>\n    &lt;pre>Values: {left: ${open}checkboxValues.left}, middle: ${open}checkboxValues.middle}, right: ${open}checkboxValues.right}}&lt;/pre>\n    &lt;div class="btn-group">\n        &lt;a class="btn btn-warning" aubs-btn-checkbox="state.bind: checkboxValues.left">Left&lt;/a>\n        &lt;a class="btn btn-warning" aubs-btn-checkbox="state.bind: checkboxValues.middle;">Middle&lt;/a>\n        &lt;a class="btn btn-warning" aubs-btn-checkbox="state.bind: checkboxValues.right">Right&lt;/a>\n    &lt;/div>\n\n    &lt;h3>Radio Button&lt;/h3>\n    &lt;pre>Selection: ${open}radioSelection}&lt;/pre>\n    &lt;div class="btn-group">\n        &lt;a class="btn btn-default" aubs-btn-radio="model.bind: radioSelection; value: left">Left&lt;/a>\n        &lt;a class="btn btn-default ${open}disabled ? \'disabled\' : \'\'}"\n           aubs-btn-radio="model.bind: radioSelection; value: middle">Middle&lt;/a>\n        &lt;a class="btn btn-default" aubs-btn-radio="model.bind: radioSelection; value: right">Right&lt;/a>\n    &lt;/div>\n    &lt;div class="checkbox">\n        &lt;label> &lt;input type="checkbox" checked.bind="disabled"> Disable Middle &lt;/label>\n    &lt;/div>\n\n    &lt;h3>Loading Button&lt;/h3>\n    &lt;a class="btn btn-default" click.delegate="ajaxCall()"\n       aubs-btn-loading="loading.bind: isLoading; text: &lt;i class=\'fa fa-refresh fa-spin\'>&lt;/i> Loading...">\n        Ajax Call\n    &lt;/a>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>export class Buttons {\n\n    myChecked = {\n        value: 1\n    };\n\n    myUnchecked = {\n        value: 0\n    };\n\n    singleToggle = this.myChecked;\n\n    checkboxValues = {\n        left: true,\n        middle: false,\n        right: false\n    };\n\n    radioSelection = \'middle\';\n\n    disabled = true;\n\n    isLoading = false;\n\n    clicked(){\n        alert(\'Button Clicked!!\');\n    }\n\n    ajaxCall() {\n        console.log(\'clicked\');\n        this.isLoading = true;\n        setTimeout(() => {\n            this.isLoading = false\n        }, 3000);\n    }\n}</code></pre></aubs-tab></aubs-tabset></div></div></div></template>'})}(),System.register("buttons/buttons.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("Buttons",d=function(){function a(){c(this,a),this.open="${",this.myChecked={value:1},this.myUnchecked={value:0},this.singleToggle=this.myChecked,this.checkboxValues={left:!0,middle:!1,right:!1},this.radioSelection="middle",this.disabled=!0,this.isLoading=!1}return a.prototype.clicked=function(){alert("Button Clicked!!")},a.prototype.ajaxCall=function(){var a=this;console.log("clicked"),this.isLoading=!0,setTimeout(function(){a.isLoading=!1},3e3)},a}()),a("Buttons",d)}}}),function(){var a=System.amdDefine;a("introduction/introduction.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-banner"><h1 class="project-name">Aurelia Bootstrap</h1><h2 class="project-tagline">Bootstrap components written in Aurelia</h2><a href="https://github.com/tochoromero/aurelia-bootstrap" class="btn">View on GitHub</a> <a href="https://github.com/tochoromero/aurelia-bootstrap/zipball/master" class="btn">Download .zip</a> <a href="https://github.com/tochoromero/aurelia-bootstrap/tarball/master" class="btn">Download .tar.gz</a></div><div class="container-fluid"><div class="row" id="introduction"><div class="col-md-12"><div class="page-header"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-bootstrap/tree/master/doc/src/introduction"><i class="fa fa-edit"></i> Improve documentation</a><h1>Introduction</h1></div><p>Aurelia Bootstrap is a collection of Custom Elements and Custom Attributes that facilitate working with Bootstrap on a native Aurelia way.</p><p>It has no dependency on jQuery, all the Javascript code has been written for Aurelia. Our only dependency is Velocity for animations.</p><div class="page-header" id="installation"><h1>Installation</h1></div><p>You can install the plugin directly from its Github repository with jspm:<pre>jspm install aurelia-bootstrap -y</pre></p><p>Once the plugin is installed we need to indicate Aurelia to use it. To do this find your <code>main.js</code> file and add the plugin:<pre><code class="language-js" au-syntax>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(\'aurelia-bootstrap\');\n\n  aurelia.start().then(() => aurelia.setRoot());\n}</code></pre></p><p>You will also need to include the Bootstrap css file. We decided to do not include that css with our plugin, so you can choose where you want to get it from, or you may even want to compile your own version.</p><p>The simplest way to get it is through your Package Management, for JSPM that would be:<pre>jspm install bootstrap -y</pre></p><p>Once you have installed the Bootstrap css with your preferred method you only need to include the bootstrap.css file, there is no need to include the fonts (which have been dropped on v4), or the javascript files. This is as simple as adding the following to your <code>app.html</code>:</p><pre>&lt;require from="bootstrap/css/bootstrap.css">&lt;/require></pre><p>And with this you are ready to start using the plugin.</p><div class="page-header"><h1>Bootstrap Version</h1></div><p>Right now Bootstrap is in the middle of updating to v4, we have planned support for Bootstrap 4, and in fact it is already in the codebase. We plan to support both Bootstrap version for the foreseeable future, but for now Bootstrap 3 is the default version. If you wish to switch to Bootstrap 4 you need the following in your <code>main.js</code>:</p><pre><code class="language-js" au-syntax>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(\'aurelia-bootstrap\', config => config.options.version = 4);\n\n  aurelia.start().then(() => aurelia.setRoot());\n}</code></pre></div></div></div></template>'})}(),System.register("introduction/introduction.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("Introduction",d=function a(){c(this,a)}),a("Introduction",d)}}}),System.register("main.js",["fetch"],function(a,b){"use strict";function c(a){a.use.standardConfiguration().developmentLogging().plugin("aurelia-syntax-highlighter").plugin("aurelia-bootstrap").feature("resources"),a.start().then(function(){return a.setRoot()})}return a("configure",c),{setters:[function(a){}],execute:function(){}}}),function(){var a=System.amdDefine;a("nav-bar.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template bindable="router"><nav class="navbar navbar-default navbar-fixed-top" role="navigation"><div class="navbar-header"><a class="navbar-brand" href="#"><span>Aurelia Bootstrap</span></a></div><ul class="nav navbar-nav"><li><a href="#/introduction">Getting Started</a></li><li class="dropdown" aubs-dropdown><a href="javascript:void(0)" class="dropdown-toggle" aubs-dropdown-toggle>Components <span class="caret"></span></a><ul class="dropdown-menu"><li repeat.for="row of router.navigation" class="${row.isActive ? \'active\' : \'\'}"><a class="dropdown-item" href.bind="row.href">${row.title}</a></li></ul></li></ul></nav></template>'})}(),System.register("resources/index.js",[],function(a,b){"use strict";function c(a){a.globalResources("./settings-type/property.html","./settings-type/boolean.html","./settings-type/two-way.html","./settings-type/string.html","./settings-type/markup.html","./settings-type/any.html")}return a("configure",c),{setters:[],execute:function(){}}}),function(){var a=System.amdDefine;a("resources/settings-type/any.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><small class="badge" aubs-tooltip="text:You can use any value. It can be literal or an object">a</small> &nbsp;</template>'})}(),function(){var a=System.amdDefine;a("resources/settings-type/boolean.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><small class="badge" aubs-tooltip="text:Expects a Boolean value. It can be literal or from your view-model">b</small> &nbsp;</template>'})}(),function(){var a=System.amdDefine;a("resources/settings-type/markup.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><small class="badge" aubs-tooltip="text:You can use html markup"><i class="fa fa-code"></i></small> &nbsp;</template>'})}(),function(){var a=System.amdDefine;a("resources/settings-type/property.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><small class="badge" aubs-tooltip="text:Expects a property from your view-model">p</small>&nbsp;</template>'})}(),function(){var a=System.amdDefine;a("resources/settings-type/string.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><small class="badge" aubs-tooltip="text:Expects a String value. It can be literal or from your view-model">s</small> &nbsp;</template>'})}(),function(){var a=System.amdDefine;a("resources/settings-type/two-way.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><small class="badge" aubs-tooltip="text:This property has a two way data binding"><i class="fa fa-arrows-h"></i></small> &nbsp;</template>'})}();